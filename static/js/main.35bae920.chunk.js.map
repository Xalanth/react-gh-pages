{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","children","NavItem","exact","activeClassName","to","icon","class","category","NavLogo","title","NavThemify","id","href","Main","path","component","Home","Projects","Contact","Resume","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAsBA,SAASA,EAAOC,GACd,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,cAAd,IAA8BD,EAAME,WAK1C,SAASC,EAAQH,GAEf,OACE,wBAAIC,UAAU,YACZ,kBAAC,IAAD,CAASA,UAAU,WAAWG,OAAK,EAACC,gBAAgB,UAAUC,GAAIN,EAAMM,IACrEN,EAAMO,KACP,0BAAMC,MAAM,aAAaR,EAAMS,YAMvC,SAASC,EAAQV,GAEf,OACE,wBAAIC,UAAU,QACZ,kBAAC,IAAD,CAASA,UAAU,WAAWG,OAAK,EAACC,gBAAgB,UAAUC,GAAG,UAC/D,0BAAME,MAAM,uBAAuBR,EAAMW,OACxCX,EAAMO,OAOf,SAASK,EAAWZ,GAElB,OACE,wBAAIC,UAAU,WAAWY,GAAG,eAC1B,uBAAGC,KAAK,IAAIb,UAAU,YACnBD,EAAMO,KACP,0BAAMC,MAAM,aAAaR,EAAMS,YAOvC,IAAMM,EAAO,kBACX,0BAAMF,GAAG,aACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOT,OAAK,EAACY,KAAK,SAASC,UAAWC,IACtC,kBAAC,IAAD,CAAOd,OAAK,EAACY,KAAK,YAAYC,UAAWE,IACzC,kBAAC,IAAD,CAAOf,OAAK,EAACY,KAAK,WAAWC,UAAWG,IACxC,kBAAC,IAAD,CAAOhB,OAAK,EAACY,KAAK,UAAUC,UAAWI,OAKvCH,EAAO,kBACX,yBAAKjB,UAAU,QACb,+DACA,mFACA,wCACA,mLACA,qLAIEkB,EAAW,kBACf,yBAAKlB,UAAU,YACb,wCACA,uCACA,uBAAGa,KAAK,kCAAiC,mEACzC,mDACA,sCACA,gDAIEO,EAAS,kBACb,yBAAKpB,UAAU,UACb,sCACA,0CACA,gDAIEmB,EAAU,kBACd,yBAAKnB,UAAU,WACb,uCACA,wCAAa,uBAAGa,KAAK,4CAA2C,8EAChE,sCAAW,uBAAGA,KAAK,8BAA6B,wDAChD,qCAAU,8DAKCQ,EAlHf,WACE,OACE,6BACE,kBAACvB,EAAD,KACE,kBAACW,EAAD,CAASH,KAAM,uBAAGC,MAAM,oCAAqCG,MAAM,aACnE,kBAACR,EAAD,CAASI,KAAM,uBAAGC,MAAM,sBAAwBC,SAAS,OAAOH,GAAG,WAEnE,kBAACH,EAAD,CAASI,KAAM,uBAAGC,MAAM,sBAAwBC,SAAS,WAAWH,GAAG,cACvE,kBAACH,EAAD,CAASI,KAAM,uBAAGC,MAAM,sBAAwBC,SAAS,SAASH,GAAG,YAErE,kBAACH,EAAD,CAASI,KAAM,uBAAGC,MAAM,8BAAgCC,SAAS,UAAUH,GAAG,aAC9E,kBAACM,EAAD,CAAYL,KAAM,CAAC,uBAAGC,MAAM,sBAAwB,uBAAGA,MAAM,qBAAuB,uBAAGA,MAAM,4BAA8BC,SAAS,aAEtI,kBAAC,EAAD,QCLcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.35bae920.chunk.js","sourcesContent":["import { NavLink, Switch, Route } from 'react-router-dom';\n\nimport React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar>\n        <NavLogo icon={<i class=\"fas fa-angle-double-right fa-2x\"/>} title='Alan Xia' />\n        <NavItem icon={<i class=\"fas fa-home fa-lg\" />} category='Home' to='/about'/>\n        {/* <NavItem icon={<i class=\"fas fa-cat fa-2x\" />} category='Pets' to='/about'/> */}\n        <NavItem icon={<i class=\"fas fa-code fa-lg\" />} category='Projects' to='/projects'/>\n        <NavItem icon={<i class=\"far fa-file fa-2x\" />} category='Resume' to='/resume'/>\n        {/* <NavItem icon={<i class=\"fas fa-language fa-lg\" />} category='Languages' to='/languages'/> */}\n        <NavItem icon={<i class=\"far fa-address-book fa-2x\" />} category='Contact' to='/contact'/>\n        <NavThemify icon={[<i class=\"fas fa-moon fa-2x\" />, <i class=\"fas fa-sun fa-2x\" />, <i class=\"fas fa-cloud-sun fa-lg\" />]} category='Themify' />\n      </Navbar>\n      <Main />\n    </div>\n  );\n}\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav\"> { props.children }</ul>\n    </nav>\n  );\n}\n\nfunction NavItem(props) {\n\n  return (\n    <li className=\"nav-item\">\n      <NavLink className=\"nav-link\" exact activeClassName=\"current\" to={props.to}>\n        {props.icon}\n        <span class=\"link-text\">{props.category}</span>\n      </NavLink>\n    </li>\n  );\n}\n\nfunction NavLogo(props) {\n\n  return (\n    <li className=\"logo\">\n      <NavLink className=\"nav-link\" exact activeClassName=\"current\" to='/about'>\n        <span class=\"link-text logo-text\">{props.title}</span>\n        {props.icon}\n      </NavLink>\n    </li>\n  );\n\n}\n\nfunction NavThemify(props) {\n\n  return (\n    <li className=\"nav-item\" id=\"themeButton\">\n      <a href=\"#\" className=\"nav-link\">\n        {props.icon}\n        <span class=\"link-text\">{props.category}</span>\n      </a>\n    </li>\n  );\n}\n\n\nconst Main = () => (\n  <main id=\"component\">\n    <Switch>\n      <Route exact path='/about' component={Home}></Route>\n      <Route exact path='/projects' component={Projects}></Route>\n      <Route exact path='/contact' component={Contact}></Route>\n      <Route exact path='/resume' component={Resume}></Route>\n    </Switch>\n  </main>\n);\n\nconst Home = () => (\n  <div className='home'>\n    <h1>Welcome to my portfolio website</h1>\n    <p> Feel free to browse around and learn more about me.</p>\n    <h1>About Me</h1>\n    <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi dolorum molestias?</p>\n    <p>Ipsum dolor dolorem consectetur est velit fugiat. Dolorem provident corporis fuga saepe distinctio ipsam? Et quos harum excepturi dolorum molestias?</p>\n  </div>\n);\n\nconst Projects = () => (\n  <div className='projects'>\n    <h1>Projects</h1>\n    <h2>WebPage</h2>\n    <a href=\"/facebook-reverse-engineer-nav\"><h3>Facebook Navigation Bar w/ ReactJS</h3></a>\n    <h3>More coming Soon...</h3>\n    <h2>Mobile</h2>\n    <h3>Coming Soon...</h3>\n  </div>\n);\n\nconst Resume = () => (\n  <div className='resume'>\n    <h1>Resume</h1>\n    <h2>PDF Link: </h2>\n    <h3>Coming Soon...</h3>\n  </div>\n);\n\nconst Contact = () => (\n  <div className='contact'>\n    <h1>Contact</h1>\n    <p>LinkedIn: <a href=\"https://www.linkedin.com/in/alan-xia-se/\"><strong>https://www.linkedin.com/in/alan-xia-se/</strong></a></p>\n    <p>Github: <a href=\"https://github.com/xalanth\"><strong>github.com/xalanth</strong></a></p>\n    <p>Email: <strong>xialan2917 at gmail.com</strong></p>\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}